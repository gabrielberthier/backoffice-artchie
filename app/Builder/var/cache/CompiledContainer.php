<?php
/**
 * This class has been auto-generated by PHP-DI.
 */
class CompiledContainer extends DI\CompiledContainer{
    const METHOD_MAPPING = array (
  'settings' => 'get1',
  'subEntry1' => 'get2',
  'subEntry2' => 'get3',
  'App\\Data\\Protocols\\User\\UserUseCaseInterface' => 'get4',
  'subEntry3' => 'get5',
  'App\\Data\\Protocols\\Auth\\LoginServiceInterface' => 'get6',
  'subEntry4' => 'get7',
  'subEntry5' => 'get8',
  'App\\Data\\Protocols\\Auth\\SignUpServiceInterface' => 'get9',
  'subEntry6' => 'get10',
  'App\\Data\\Protocols\\Markers\\Downloader\\MarkerDownloaderServiceInterface' => 'get11',
  'subEntry7' => 'get12',
  'subEntry8' => 'get13',
  'subEntry9' => 'get14',
  'App\\Data\\Protocols\\Markers\\Store\\MarkerServiceStoreInterface' => 'get15',
  'subEntry10' => 'get16',
  'subEntry11' => 'get17',
  'subEntry12' => 'get18',
  'App\\Data\\Protocols\\AsymCrypto\\SignerInterface' => 'get19',
  'subEntry13' => 'get20',
  'subEntry14' => 'get21',
  'subEntry15' => 'get22',
  'App\\Data\\Protocols\\Media\\MediaCollectorInterface' => 'get23',
  'App\\Data\\Protocols\\Resources\\ResourcesDownloaderInterface' => 'get24',
  'subEntry16' => 'get25',
  'subEntry17' => 'get26',
  'subEntry18' => 'get27',
  'App\\Domain\\Repositories\\UserRepository' => 'get28',
  'App\\Domain\\Repositories\\AccountRepository' => 'get29',
  'subEntry19' => 'get30',
  'App\\Domain\\Repositories\\MuseumRepository' => 'get31',
  'App\\Domain\\Repositories\\MarkerRepositoryInterface' => 'get32',
  'subEntry20' => 'get33',
  'App\\Domain\\Repositories\\SignatureTokenRepositoryInterface' => 'get34',
  'subEntry21' => 'get35',
  'App\\Domain\\Repositories\\SignatureTokenRetrieverInterface' => 'get36',
  'subEntry22' => 'get37',
  'Psr\\Log\\LoggerInterface' => 'get38',
  'S3DataTransfer\\Interfaces\\Download\\StreamCollectorInterface' => 'get39',
  'S3DataTransfer\\S3\\Zip\\S3StreamObjectsZipDownloader' => 'get40',
  'S3DataTransfer\\Interfaces\\Upload\\UploadCollectorInterface' => 'get41',
  'League\\OAuth2\\Client\\Provider\\Google' => 'get42',
  'Doctrine\\ORM\\EntityManagerInterface' => 'get43',
  'Cycle\\Database\\DatabaseManager' => 'get44',
  'Cycle\\ORM\\ORM' => 'get45',
  'Cycle\\ORM\\EntityManager' => 'get46',
  'connection' => 'get47',
  'App\\Presentation\\Actions\\Markers\\Utils\\PresignedUrlCreator' => 'get48',
);

    protected function get2()
    {
        return [
            'name' => 'slim-app',
            'path' => 'php://stdout',
            'level' => 100,
        ];
    }

    protected function get3()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $c): array {
            return [
                // if true, metadata caching is forcefully disabled
                'dev_mode' => \Core\functions\isDev(),

                // path where the compiled metadata info will be cached
                // make sure the path exists and it is writable
                'cache_dir' => \getcwd() . '/var/doctrine',

                // you should add any other path containing annotated entity classes
                'metadata_dirs' => [\getcwd() . '/src/Data/Entities/Doctrine'],

                'connection' => $c->get('connection'),
            ];
        }, 'subEntry2');
    }

    protected function get1()
    {
        return [
            'displayErrorDetails' => true,
            'logger' => $this->get2(),
            'doctrine' => $this->get3(),
        ];
    }

    protected function get5()
    {
        return $this->delegateContainer->get('App\\Domain\\Repositories\\UserRepository');
    }

    protected function get4()
    {
        $object = new App\Data\UseCases\User\UserService($this->get5());
        return $object;
    }

    protected function get7()
    {
        return $this->delegateContainer->get('App\\Domain\\Repositories\\AccountRepository');
    }

    protected function get8()
    {
        return $this->delegateContainer->get('App\\Data\\Protocols\\Cryptography\\ComparerInterface');
    }

    protected function get6()
    {
        $object = new App\Data\UseCases\Authentication\Login($this->get7(), $this->get8());
        return $object;
    }

    protected function get10()
    {
        return $this->delegateContainer->get('App\\Domain\\Repositories\\AccountRepository');
    }

    protected function get9()
    {
        $object = new App\Data\UseCases\Authentication\SignUp($this->get10());
        return $object;
    }

    protected function get12()
    {
        return $this->delegateContainer->get('S3DataTransfer\\S3\\Zip\\S3StreamObjectsZipDownloader');
    }

    protected function get13()
    {
        return $this->delegateContainer->get('App\\Domain\\Repositories\\MarkerRepositoryInterface');
    }

    protected function get14()
    {
        return $this->delegateContainer->get('App\\Data\\Protocols\\Media\\MediaCollectorInterface');
    }

    protected function get11()
    {
        $object = new App\Data\UseCases\Markers\MarkerDownloader($this->get12(), $this->get13(), $this->get14());
        return $object;
    }

    protected function get16()
    {
        return $this->delegateContainer->get('App\\Domain\\Repositories\\MuseumRepository');
    }

    protected function get17()
    {
        return $this->delegateContainer->get('App\\Domain\\Repositories\\MarkerRepositoryInterface');
    }

    protected function get18()
    {
        return $this->delegateContainer->get('Doctrine\\ORM\\EntityManagerInterface');
    }

    protected function get15()
    {
        $object = new App\Data\UseCases\Markers\MarkerServiceStore($this->get16(), $this->get17(), $this->get18());
        return $object;
    }

    protected function get20()
    {
        return $this->delegateContainer->get('App\\Domain\\Repositories\\MuseumRepository');
    }

    protected function get21()
    {
        return $this->delegateContainer->get('App\\Data\\Protocols\\Cryptography\\AsymmetricEncrypter');
    }

    protected function get22()
    {
        return $this->delegateContainer->get('App\\Domain\\Repositories\\SignatureTokenRepositoryInterface');
    }

    protected function get19()
    {
        $object = new App\Data\UseCases\AsymCrypto\AsymmetricSigner($this->get20(), $this->get21(), $this->get22());
        return $object;
    }

    protected function get23()
    {
        $object = new App\Data\UseCases\Media\MediaCollectorVisitor();
        return $object;
    }

    protected function get25()
    {
        return $this->delegateContainer->get('App\\Domain\\Repositories\\MuseumRepository');
    }

    protected function get26()
    {
        return $this->delegateContainer->get('App\\Domain\\Repositories\\MarkerRepositoryInterface');
    }

    protected function get27()
    {
        return $this->delegateContainer->get('App\\Presentation\\Actions\\Markers\\Utils\\PresignedUrlCreator');
    }

    protected function get24()
    {
        $object = new App\Data\UseCases\Resources\DeliveryMan($this->get25(), $this->get26(), $this->get27());
        return $object;
    }

    protected function get28()
    {
        $object = new App\Infrastructure\Persistence\User\InMemoryUserRepository(NULL);
        return $object;
    }

    protected function get30()
    {
        return $this->delegateContainer->get('Doctrine\\ORM\\EntityManagerInterface');
    }

    protected function get29()
    {
        $object = new App\Infrastructure\Persistence\Doctrine\DoctrineAccountRepository($this->get30());
        return $object;
    }

    protected function get31()
    {
        $object = new App\Infrastructure\Persistence\Doctrine\MuseumDoctrineRepository();
        return $object;
    }

    protected function get33()
    {
        return $this->delegateContainer->get('Doctrine\\ORM\\EntityManagerInterface');
    }

    protected function get32()
    {
        $object = new App\Infrastructure\Persistence\Doctrine\MarkerDoctrineRepository($this->get33());
        return $object;
    }

    protected function get35()
    {
        return $this->delegateContainer->get('Doctrine\\ORM\\EntityManagerInterface');
    }

    protected function get34()
    {
        $object = new App\Infrastructure\Persistence\Doctrine\SignatureTokenRepository($this->get35());
        return $object;
    }

    protected function get37()
    {
        return $this->delegateContainer->get('Doctrine\\ORM\\EntityManagerInterface');
    }

    protected function get36()
    {
        $object = new App\Infrastructure\Persistence\Doctrine\SignatureTokenRepository($this->get37());
        return $object;
    }

    protected function get38()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $c) {
        $settings = $c->get('settings');

        $loggerSettings = $settings['logger'];
        $logger = new \Monolog\Logger($loggerSettings['name']);

        $processor = new \Monolog\Processor\UidProcessor();
        $logger->pushProcessor($processor);

        $handler = new \Monolog\Handler\StreamHandler($loggerSettings['path'], $loggerSettings['level']);
        $logger->pushHandler($handler);

        return $logger;
    }, 'Psr\\Log\\LoggerInterface');
    }

    protected function get39()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $c): \S3DataTransfer\Interfaces\Download\StreamCollectorInterface {
        $factory = new \S3DataTransfer\S3\Factories\S3AsyncDownloaderFactory();
        $key = $_ENV['S3KEY'];
        $secret = $_ENV['S3SECRET'];
        $region = $_ENV['S3REGION'];
        $version = $_ENV['S3VERSION'];

        return $factory->create($key, $secret, $region, $version);
    }, 'S3DataTransfer\\Interfaces\\Download\\StreamCollectorInterface');
    }

    protected function get40()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $container): \S3DataTransfer\S3\Zip\S3StreamObjectsZipDownloader {
        /**
         * @var StreamCollectorInterface
         */
        $streamCollector = $container->get(\S3DataTransfer\Interfaces\Download\StreamCollectorInterface::class);

        return new \S3DataTransfer\S3\Zip\S3StreamObjectsZipDownloader($streamCollector);
    }, 'S3DataTransfer\\S3\\Zip\\S3StreamObjectsZipDownloader');
    }

    protected function get41()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $c): \S3DataTransfer\Interfaces\Upload\UploadCollectorInterface {
        $factory = new \S3DataTransfer\S3\Factories\S3AsyncUploadingFactory();
        $key = $_ENV['S3KEY'];
        $secret = $_ENV['S3SECRET'];
        $region = $_ENV['S3REGION'];
        $version = $_ENV['S3VERSION'];

        return $factory->create($key, $secret, $region, $version);
    }, 'S3DataTransfer\\Interfaces\\Upload\\UploadCollectorInterface');
    }

    protected function get42()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $c): \League\OAuth2\Client\Provider\Google {
        $clientId = $_ENV['GOOGLE_CLIENT_ID'];
        $clientSecret = $_ENV['GOOGLE_CLIENT_SECRET'];
        $redirectUri = $_ENV['GOOGLE_REDIRECT_URI'];
        
        return new \League\OAuth2\Client\Provider\Google(\compact('clientId', 'clientSecret', 'redirectUri'));
    }, 'League\\OAuth2\\Client\\Provider\\Google');
    }

    protected function get43()
    {
        return $this->resolveFactory(static fn(
    \Psr\Container\ContainerInterface $container
) => \Core\Data\Doctrine\EntityManagerBuilder::produce(
        $container->get("settings")["doctrine"]
    ), 'Doctrine\\ORM\\EntityManagerInterface');
    }

    protected function get44()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $container): \Cycle\Database\DatabaseManager {
        $connectorFacade = new \Core\Data\Cycle\Facade\ConnectorFacade(
            connection: $container->get("connection")
        );

        // Configure connector as you wish
        $connectorFacade
            ->configureFactory()
            ->withQueryCache(true)
            ->withSchema("public");

        return new \Cycle\Database\DatabaseManager(
            new \Cycle\Database\Config\DatabaseConfig([
                "default" => "default",
                "databases" => [
                    "default" => ["connection" => "production"],
                ],
                "connections" => [
                    "sqlite" => new \Cycle\Database\Config\SQLiteDriverConfig(
                        connection: new \Cycle\Database\Config\SQLite\MemoryConnectionConfig(),
                        queryCache: true
                    ),
                    "production" => $connectorFacade->produceDriverConnection(),
                ],
            ])
        );
    }, 'Cycle\\Database\\DatabaseManager');
    }

    protected function get45()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $container) {
        $root = \dirname(\dirname('/var/www/app/Definitions'));
        $finder = (new \Symfony\Component\Finder\Finder())->files()->in([$root . '/src/Data/Entities/Cycle']);
        $classLocator = new \Spiral\Tokenizer\ClassLocator($finder);
        $database = $container->get(\Cycle\Database\DatabaseManager::class);
        $schemaCompiler = new \Cycle\Schema\Compiler();


        $schema = $schemaCompiler->compile(new \Cycle\Schema\Registry($database), [
            new \Cycle\Schema\Generator\ResetTables(),
                // re-declared table schemas (remove columns)
            new \Cycle\Annotated\Embeddings($classLocator),
                // register embeddable entities
            new \Cycle\Annotated\Entities($classLocator),
                // register annotated entities
            new \Cycle\Annotated\TableInheritance(),
                // register STI/JTI
            new \Cycle\Annotated\MergeColumns(),
                // add @Table column declarations
            new \Cycle\Schema\Generator\GenerateRelations(),
                // generate entity relations
            new \Cycle\Schema\Generator\GenerateModifiers(),
                // generate changes from schema modifiers
            new \Cycle\Schema\Generator\ValidateEntities(),
                // make sure all entity schemas are correct
            new \Cycle\Schema\Generator\RenderTables(),
                // declare table schemas
            new \Cycle\Schema\Generator\RenderRelations(),
                // declare relation keys and indexes
            new \Cycle\Schema\Generator\RenderModifiers(),
                // render all schema modifiers
            new \Cycle\Annotated\MergeIndexes(),
                // add @Table column declarations
            new \Cycle\Schema\Generator\SyncTables(),
                // sync table changes to database
            new \Cycle\Schema\Generator\GenerateTypecast(), // typecast non string columns
        ]);
        $schema = new \Cycle\ORM\Schema($schema);
        $commandGenerator = new \Cycle\ORM\Entity\Behavior\EventDrivenCommandGenerator($schema, $container);

        $orm = new \Cycle\ORM\ORM(new \Cycle\ORM\Factory($database), $schema, $commandGenerator);

        return $orm;
    }, 'Cycle\\ORM\\ORM');
    }

    protected function get46()
    {
        return $this->resolveFactory(static fn(\Psr\Container\ContainerInterface $container) => new \Cycle\ORM\EntityManager($container->get(\Cycle\ORM\ORM::class)), 'Cycle\\ORM\\EntityManager');
    }

    protected function get47()
    {
        return $this->resolveFactory(static function (): array {
        $exceptionMessage = 'An application mode should be specified at project level .env or _ENV' .
            'variable containing one of the following values: PRODUCTION, TEST or DEV';
        $connectionArray = [];

        if (isset($_ENV['DATABASE_URL'])) {
            $connectionArray['url'] = $_ENV['DATABASE_URL'];
        } else {
            $dbParams = ['DRIVER', 'HOST', 'DBNAME', 'PORT', 'USER', 'PASSWORD', 'CHARSET'];
            foreach ($dbParams as $param) {
                $connectionArray[$param] = $_ENV[$param];
            }
        }

        return match (\Core\functions\mode()) {
            'TEST' => [
                'driver' => 'pdo_sqlite',
                'memory' => 'true',
            ],
            'PRODUCTION', 'DEV' => $connectionArray,
            default => throw new \Exception($exceptionMessage, 500)
        };
    }, 'connection');
    }

    protected function get48()
    {
        $object = new App\Presentation\Actions\Markers\Utils\PresignedUrlCreator();
        return $object;
    }

}
